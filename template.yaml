AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  image-processing

  Sample SAM Template for image-processing

Globals:
  Function:
    Timeout: 3

    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
Resources:
  ImageUploadBucket:
    Type: AWS::S3::Bucket

  ProcessedImagesBucket:
    Type: AWS::S3::Bucket

  ImageProcessingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: image-processing-queue

  SQSProducerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SQSProducer/
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      Architectures:
      - x86_64
      Environment:
        Variables:
          QUEUE_URL: !Ref ImageProcessingQueue
      Events:
        ImageUpload:
          Type: S3
          Properties:
            Bucket: !Ref ImageUploadBucket
            Events: s3:ObjectCreated:*

    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  # Downloaded a pre-built lambda layer for sharp  and placed it inside SQSConsumer/layers/
  # https://github.com/pH200/sharp-layer?tab=readme-ov-file
  SharpLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: sharp
      ContentUri: SQSConsumer/layers/release-x64.zip
      CompatibleArchitectures:
        - x86_64
      CompatibleRuntimes:
        - nodejs20.x

  SQSConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: SQSConsumer/
      Handler: app.lambdaHandler
      Runtime: nodejs20.x
      Timeout: 120 # in seconds
      Layers:
        - !Ref SharpLayer
      Architectures:
        - x86_64
      Events:
        SQSTrigger:
          Type: SQS
          Properties:
            Queue: !GetAtt ImageProcessingQueue.Arn
      Environment:
        Variables:
          OUTPUT_BUCKET: !Ref ProcessedImagesBucket
          INPUT_BUCKET: !Ref ImageUploadBucket
          QUEUE_URL: !Ref ImageProcessingQueue

    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts
        Format: cjs # instead of esm as this sharp layer is a bit ourdated
        # OutExtension:
        #   - .js=.mjs
        External:
          - sharp # use layer
  
  # Permissions for Lambda functions to access S3 and SQS
  S3BucketGetObjectPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ImageUploadBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt SQSConsumerFunctionRole.Arn
            Action:
              - s3:GetObject
            Resource: !Sub arn:aws:s3:::${ImageUploadBucket}/*

  S3BucketPutObjectPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ProcessedImagesBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt SQSConsumerFunctionRole.Arn
            Action:
              - s3:PutObject
            Resource: !Sub arn:aws:s3:::${ProcessedImagesBucket}/*

  LambdaSQSPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaSQSPolicy
      Roles:
        - !Ref SQSProducerFunctionRole
        - !Ref SQSConsumerFunctionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sqs:SendMessage
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Resource: !GetAtt ImageProcessingQueue.Arn

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ImageUploadBucketName:
    Description: "Name of the S3 bucket"
    Value: !Ref ImageUploadBucket
  ProcessedImagesBucketName:
    Description: "Name of the S3 bucket"
    Value: !Ref ProcessedImagesBucket
  SQSProducerFunction:
    Description: SQS Producer function
    Value: !GetAtt SQSProducerFunction.Arn
  SQSConsumerFunction:
    Description: SQS Consumer function
    Value: !GetAtt SQSConsumerFunction.Arn
  SQSProducerFunctionIamRole:
    Description: Implicit IAM Role created for sqs producer function
    Value: !GetAtt SQSProducerFunctionRole.Arn
  SQSConsumerFunctionIamRole:
    Description: Implicit IAM Role created for sqs consumer function
    Value: !GetAtt SQSConsumerFunctionRole.Arn
